/* The following code was generated by JFlex 1.7.0 */

package hipsterdex;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>/Users/annabaker/git/Hipsterdex/src/main/jflex/Lexer.flex</tt>
 */
public class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\3\2\1\1\2\22\0\1\22\1\1\1\0\1\62"+
    "\1\1\1\1\1\1\1\64\1\1\1\1\1\7\1\7\1\1\1\7"+
    "\1\1\1\1\1\4\11\5\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\10\1\12\1\27\2\6\1\11\1\35\1\44\1\25\1\33"+
    "\1\41\1\43\1\46\1\47\1\51\1\65\1\6\1\66\1\36\1\56"+
    "\1\57\1\6\1\61\1\6\1\60\1\6\1\1\1\0\1\1\1\1"+
    "\1\1\1\1\1\13\1\32\1\17\1\40\1\14\1\52\1\53\1\24"+
    "\1\16\1\6\1\21\1\30\1\50\1\26\1\42\1\31\1\37\1\20"+
    "\1\15\1\23\1\34\1\55\1\54\1\63\1\45\1\6\1\1\1\7"+
    "\1\1\1\1\6\0\1\1\32\0\1\1\32\0\1\1\u15c4\0\1\1"+
    "\u097f\0\13\1\35\0\2\1\5\0\1\1\57\0\1\1\u0fa0\0\1\1"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ud00f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\3\2\1\3\1\2\21\3\1\4\1\2"+
    "\2\3\1\4\5\3\1\0\30\3\1\5\6\3\1\0"+
    "\22\3\1\0\14\3\2\0\21\3\2\0\11\3\3\0"+
    "\1\3\2\0\4\3\1\0\4\3\2\0\1\3\1\0"+
    "\1\3\1\0\2\3\1\0\1\6\6\0\1\3\2\0"+
    "\1\3\1\0\3\3\4\0\1\3\1\0\2\3\7\0"+
    "\1\3\4\0\2\3\5\0\1\3\12\0\1\3\4\0"+
    "\1\3\11\0\1\3\21\0\1\6\34\0\1\5\25\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[289];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\67\0\156\0\245\0\334\0\334\0\u0113"+
    "\0\u014a\0\u0181\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb"+
    "\0\u0302\0\u0339\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\u0483"+
    "\0\67\0\u04ba\0\u04f1\0\u0528\0\334\0\u055f\0\u0596\0\u05cd"+
    "\0\u0604\0\u063b\0\u0672\0\u06a9\0\u06e0\0\u0717\0\u074e\0\u0785"+
    "\0\u07bc\0\u07f3\0\u082a\0\u0861\0\u0898\0\u08cf\0\u0906\0\u093d"+
    "\0\u0974\0\u09ab\0\u09e2\0\u0a19\0\u0a50\0\u0a87\0\u0abe\0\u0af5"+
    "\0\u0b2c\0\u0b63\0\u0b9a\0\334\0\u0bd1\0\u0c08\0\u0c3f\0\u0c76"+
    "\0\u0cad\0\u0ce4\0\u0d1b\0\u0d52\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e"+
    "\0\u0e65\0\u0e9c\0\u0ed3\0\u0f0a\0\u0f41\0\u0f78\0\u0faf\0\u0fe6"+
    "\0\u101d\0\u1054\0\u108b\0\u10c2\0\u10f9\0\u1130\0\u1167\0\u119e"+
    "\0\u11d5\0\u120c\0\u1243\0\u127a\0\u12b1\0\u12e8\0\u131f\0\u1356"+
    "\0\u138d\0\u13c4\0\u13fb\0\u1432\0\u1469\0\u14a0\0\u14d7\0\u150e"+
    "\0\u1545\0\u157c\0\u15b3\0\u15ea\0\u1621\0\u1658\0\u168f\0\u16c6"+
    "\0\u16fd\0\u1734\0\u176b\0\u17a2\0\u17d9\0\u1810\0\u1847\0\u187e"+
    "\0\u18b5\0\u18ec\0\u1923\0\u195a\0\u1991\0\u19c8\0\u19ff\0\u1a36"+
    "\0\u1a6d\0\u1aa4\0\u1adb\0\u1b12\0\u1b49\0\u1b80\0\u1bb7\0\u1bee"+
    "\0\u1c25\0\u1c5c\0\u1c93\0\u1cca\0\u1d01\0\u1d38\0\u1d6f\0\u1da6"+
    "\0\u1ddd\0\u1e14\0\u1e4b\0\u1e82\0\u1eb9\0\u1ef0\0\u1f27\0\u1f5e"+
    "\0\334\0\u1f95\0\u1fcc\0\u2003\0\u203a\0\u2071\0\u20a8\0\u20df"+
    "\0\u2116\0\u214d\0\u2184\0\u21bb\0\u21f2\0\u2229\0\u2260\0\u2297"+
    "\0\u22ce\0\u2305\0\u233c\0\u2373\0\u23aa\0\u23e1\0\u2418\0\u244f"+
    "\0\u2486\0\u24bd\0\u24f4\0\u252b\0\u2562\0\u2599\0\u25d0\0\u2607"+
    "\0\u263e\0\u2675\0\u26ac\0\u26e3\0\u271a\0\u2751\0\u2788\0\u27bf"+
    "\0\u27f6\0\u282d\0\u2864\0\u289b\0\u28d2\0\u2909\0\u2940\0\u2977"+
    "\0\u29ae\0\u29e5\0\u2a1c\0\u2a53\0\u2a8a\0\u2ac1\0\u2af8\0\u2b2f"+
    "\0\u2b66\0\u2b9d\0\u2bd4\0\u2c0b\0\u2c42\0\u2c79\0\u2cb0\0\u2ce7"+
    "\0\u2d1e\0\u2d55\0\u2d8c\0\u2dc3\0\u2dfa\0\u2e31\0\u2e68\0\u2e9f"+
    "\0\u2ed6\0\u2f0d\0\u2f44\0\u2f7b\0\u2fb2\0\u2fe9\0\u3020\0\u3057"+
    "\0\u308e\0\u30c5\0\u30fc\0\u3133\0\u316a\0\u31a1\0\67\0\u31d8"+
    "\0\u320f\0\u3246\0\u327d\0\u32b4\0\u32eb\0\u3322\0\u3359\0\u3390"+
    "\0\u33c7\0\u33fe\0\u3435\0\u346c\0\u34a3\0\u34da\0\u3511\0\u3548"+
    "\0\u357f\0\u35b6\0\u35ed\0\u3624\0\u365b\0\u3692\0\u36c9\0\u3700"+
    "\0\u3737\0\u376e\0\u37a5\0\67\0\u37dc\0\u3813\0\u384a\0\u3881"+
    "\0\u38b8\0\u38ef\0\u3926\0\u395d\0\u3994\0\u39cb\0\u3a02\0\u3a39"+
    "\0\u3a70\0\u3aa7\0\u3ade\0\u3b15\0\u3b4c\0\u3b83\0\u3bba\0\u3bf1"+
    "\0\u3c28";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[289];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\2\3\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\7\6\1\3\2\6\1\13\1\6\1\14"+
    "\3\6\1\15\1\6\1\16\1\17\2\6\1\20\1\6"+
    "\1\21\1\22\1\6\1\23\1\24\1\6\1\25\4\6"+
    "\1\26\1\6\1\27\1\30\1\31\1\6\1\32\1\33"+
    "\1\34\72\0\1\3\67\0\2\5\67\0\14\6\1\0"+
    "\37\6\1\0\4\6\6\0\3\6\1\35\10\6\1\0"+
    "\15\6\1\36\21\6\1\0\4\6\6\0\12\6\1\37"+
    "\1\6\1\0\37\6\1\0\4\6\6\0\5\6\1\40"+
    "\4\6\1\41\1\6\1\0\22\6\1\42\14\6\1\0"+
    "\4\6\6\0\14\6\1\43\37\6\1\0\4\6\6\0"+
    "\14\6\1\0\5\6\1\44\31\6\1\0\4\6\6\0"+
    "\14\6\1\0\11\6\1\45\25\6\1\0\4\6\6\0"+
    "\10\6\1\46\3\6\1\0\17\6\1\47\17\6\1\0"+
    "\4\6\6\0\5\6\1\50\2\6\1\51\3\6\1\0"+
    "\6\6\1\52\5\6\1\53\2\6\1\54\11\6\1\55"+
    "\5\6\1\0\4\6\6\0\6\6\1\56\5\6\1\0"+
    "\17\6\1\57\17\6\1\0\4\6\6\0\10\6\1\60"+
    "\3\6\1\0\37\6\1\0\4\6\6\0\14\6\1\0"+
    "\11\6\1\61\25\6\1\0\4\6\6\0\6\6\1\62"+
    "\5\6\1\0\37\6\1\0\4\6\6\0\5\6\1\63"+
    "\1\64\5\6\1\0\37\6\1\0\4\6\6\0\14\6"+
    "\1\0\3\6\1\65\33\6\1\0\4\6\6\0\14\6"+
    "\1\0\1\6\1\66\7\6\1\67\25\6\1\0\4\6"+
    "\6\0\14\6\1\0\17\6\1\70\17\6\1\0\4\6"+
    "\6\0\14\6\1\0\17\6\1\71\17\6\1\0\4\6"+
    "\6\0\14\6\1\0\23\6\1\72\13\6\1\0\1\6"+
    "\1\7\2\6\6\0\10\6\1\73\3\6\1\0\37\6"+
    "\1\0\4\6\6\0\14\6\1\0\33\6\1\74\3\6"+
    "\1\0\4\6\6\0\14\6\1\0\11\6\1\75\25\6"+
    "\1\0\4\6\6\0\14\6\1\0\11\6\1\76\25\6"+
    "\1\0\4\6\6\0\6\6\1\35\1\77\4\6\1\0"+
    "\37\6\1\0\4\6\6\0\6\6\1\100\5\6\1\0"+
    "\11\6\1\101\25\6\1\0\4\6\6\0\6\6\1\102"+
    "\5\6\1\0\37\6\1\0\4\6\53\0\1\103\21\0"+
    "\5\6\1\104\6\6\1\0\37\6\1\0\4\6\6\0"+
    "\10\6\1\105\3\6\1\0\37\6\1\0\4\6\6\0"+
    "\12\6\1\106\1\6\1\0\37\6\1\0\4\6\6\0"+
    "\5\6\1\107\6\6\1\0\37\6\1\0\4\6\6\0"+
    "\10\6\1\110\3\6\1\0\5\6\1\111\31\6\1\0"+
    "\4\6\6\0\14\6\1\0\6\6\1\112\30\6\1\0"+
    "\4\6\6\0\10\6\1\113\3\6\1\0\37\6\1\0"+
    "\4\6\6\0\14\6\1\0\11\6\1\114\25\6\1\0"+
    "\4\6\6\0\12\6\1\115\1\6\1\0\37\6\1\0"+
    "\4\6\6\0\6\6\1\116\5\6\1\0\37\6\1\0"+
    "\4\6\6\0\14\6\1\0\1\117\36\6\1\0\4\6"+
    "\6\0\14\6\1\0\25\6\1\120\11\6\1\0\4\6"+
    "\6\0\14\6\1\0\1\35\36\6\1\0\4\6\6\0"+
    "\14\6\1\0\3\6\1\111\1\6\1\121\17\6\1\122"+
    "\11\6\1\0\4\6\6\0\14\6\1\0\15\6\1\123"+
    "\21\6\1\0\4\6\6\0\14\6\1\0\25\6\1\124"+
    "\11\6\1\0\4\6\6\0\14\6\1\0\1\125\36\6"+
    "\1\0\4\6\6\0\14\6\1\126\37\6\1\0\4\6"+
    "\6\0\6\6\1\127\1\6\1\130\3\6\1\0\37\6"+
    "\1\0\4\6\6\0\12\6\1\131\1\6\1\0\37\6"+
    "\1\0\4\6\6\0\14\6\1\0\30\6\1\132\6\6"+
    "\1\0\4\6\6\0\13\6\1\133\1\0\37\6\1\0"+
    "\4\6\6\0\6\6\1\134\5\6\1\0\37\6\1\0"+
    "\4\6\6\0\11\6\1\135\2\6\1\0\37\6\1\0"+
    "\4\6\6\0\14\6\1\0\5\6\1\136\31\6\1\0"+
    "\4\6\6\0\10\6\1\137\3\6\1\0\37\6\1\0"+
    "\4\6\6\0\10\6\1\140\3\6\1\0\37\6\1\0"+
    "\4\6\6\0\5\6\1\141\6\6\1\0\37\6\1\0"+
    "\4\6\6\0\14\6\1\0\3\6\1\142\33\6\1\0"+
    "\4\6\6\0\14\6\1\143\37\6\1\0\4\6\42\0"+
    "\1\144\32\0\14\6\1\0\6\6\1\145\30\6\1\0"+
    "\4\6\6\0\11\6\1\146\2\6\1\0\37\6\1\0"+
    "\4\6\6\0\14\6\1\0\5\6\1\147\31\6\1\0"+
    "\4\6\6\0\14\6\1\0\5\6\1\150\31\6\1\0"+
    "\4\6\6\0\14\6\1\0\15\6\1\151\21\6\1\0"+
    "\4\6\6\0\14\6\1\0\1\152\36\6\1\0\4\6"+
    "\6\0\14\6\1\0\6\6\1\153\30\6\1\0\4\6"+
    "\6\0\14\6\1\0\5\6\1\154\31\6\1\0\4\6"+
    "\6\0\5\6\1\155\6\6\1\0\37\6\1\0\4\6"+
    "\6\0\12\6\1\156\1\6\1\0\37\6\1\0\4\6"+
    "\6\0\12\6\1\157\1\6\1\0\37\6\1\0\4\6"+
    "\6\0\14\6\1\0\17\6\1\35\17\6\1\0\4\6"+
    "\6\0\14\6\1\0\7\6\1\160\27\6\1\0\4\6"+
    "\6\0\14\6\1\0\11\6\1\161\25\6\1\0\4\6"+
    "\6\0\14\6\1\0\7\6\1\162\27\6\1\0\4\6"+
    "\6\0\10\6\1\163\3\6\1\0\37\6\1\0\4\6"+
    "\6\0\5\6\1\164\6\6\1\0\37\6\1\0\4\6"+
    "\6\0\14\6\1\0\27\6\1\165\7\6\1\0\4\6"+
    "\52\0\1\166\22\0\14\6\1\167\37\6\1\0\4\6"+
    "\6\0\12\6\1\170\1\6\1\0\37\6\1\0\4\6"+
    "\6\0\14\6\1\0\3\6\1\171\33\6\1\0\4\6"+
    "\6\0\5\6\1\172\2\6\1\35\3\6\1\0\37\6"+
    "\1\0\4\6\6\0\6\6\1\35\5\6\1\0\37\6"+
    "\1\0\4\6\6\0\12\6\1\173\1\6\1\0\37\6"+
    "\1\0\4\6\6\0\7\6\1\174\4\6\1\0\37\6"+
    "\1\0\4\6\6\0\14\6\1\0\1\175\36\6\1\0"+
    "\4\6\6\0\14\6\1\0\1\176\36\6\1\0\4\6"+
    "\6\0\11\6\1\35\2\6\1\0\37\6\1\0\4\6"+
    "\6\0\13\6\1\177\1\0\37\6\1\0\4\6\6\0"+
    "\11\6\1\200\2\6\1\0\37\6\1\0\4\6\11\0"+
    "\1\201\100\0\1\202\51\0\14\6\1\203\37\6\1\0"+
    "\4\6\6\0\6\6\1\204\5\6\1\0\37\6\1\0"+
    "\4\6\6\0\14\6\1\205\37\6\1\0\4\6\6\0"+
    "\7\6\1\74\4\6\1\0\37\6\1\0\4\6\6\0"+
    "\14\6\1\206\37\6\1\0\4\6\6\0\14\6\1\0"+
    "\22\6\1\35\14\6\1\0\4\6\6\0\10\6\1\207"+
    "\3\6\1\0\37\6\1\0\4\6\6\0\14\6\1\0"+
    "\5\6\1\210\31\6\1\0\4\6\6\0\14\6\1\0"+
    "\15\6\1\35\21\6\1\0\4\6\6\0\14\6\1\0"+
    "\22\6\1\211\14\6\1\0\4\6\6\0\14\6\1\0"+
    "\32\6\1\133\4\6\1\0\4\6\6\0\14\6\1\0"+
    "\11\6\1\212\25\6\1\0\4\6\6\0\14\6\1\213"+
    "\37\6\1\0\4\6\6\0\14\6\1\0\5\6\1\214"+
    "\31\6\1\0\4\6\6\0\14\6\1\0\1\215\36\6"+
    "\1\0\4\6\6\0\7\6\1\216\4\6\1\0\37\6"+
    "\1\0\4\6\6\0\14\6\1\0\5\6\1\217\31\6"+
    "\1\0\4\6\30\0\1\220\53\0\1\221\57\0\7\6"+
    "\1\111\4\6\1\0\37\6\1\0\4\6\6\0\14\6"+
    "\1\0\1\222\36\6\1\0\4\6\6\0\14\6\1\223"+
    "\37\6\1\0\4\6\6\0\10\6\1\224\3\6\1\0"+
    "\37\6\1\0\4\6\6\0\14\6\1\225\37\6\1\0"+
    "\4\6\6\0\10\6\1\226\3\6\1\0\37\6\1\0"+
    "\4\6\6\0\5\6\1\227\6\6\1\0\37\6\1\0"+
    "\4\6\6\0\14\6\1\230\37\6\1\0\4\6\6\0"+
    "\14\6\1\0\1\6\1\231\35\6\1\0\4\6\14\0"+
    "\1\232\74\0\1\233\76\0\1\234\42\0\14\6\1\235"+
    "\37\6\1\0\4\6\36\0\1\236\56\0\1\237\46\0"+
    "\14\6\1\0\3\6\1\240\33\6\1\0\4\6\6\0"+
    "\10\6\1\207\3\6\1\241\37\6\1\0\4\6\6\0"+
    "\14\6\1\242\37\6\1\0\4\6\6\0\11\6\1\243"+
    "\2\6\1\0\37\6\1\0\4\6\13\0\1\244\61\0"+
    "\6\6\1\245\5\6\1\0\37\6\1\0\4\6\6\0"+
    "\5\6\1\246\6\6\1\0\37\6\1\0\4\6\6\0"+
    "\14\6\1\0\1\133\36\6\1\0\4\6\6\0\10\6"+
    "\1\247\3\6\1\0\37\6\1\0\4\6\14\0\1\250"+
    "\75\0\1\251\51\0\14\6\1\252\37\6\1\0\4\6"+
    "\20\0\1\253\54\0\11\6\1\254\2\6\1\0\37\6"+
    "\1\0\4\6\42\0\1\255\32\0\14\6\1\0\3\6"+
    "\1\256\33\6\1\0\4\6\6\0\12\6\1\257\1\6"+
    "\1\0\37\6\1\0\4\6\23\0\1\260\73\0\1\261"+
    "\53\0\1\262\64\0\1\263\72\0\1\264\106\0\1\265"+
    "\71\0\1\266\32\0\14\6\1\0\30\6\1\267\6\6"+
    "\1\0\4\6\23\0\1\270\71\0\1\271\46\0\14\6"+
    "\1\0\1\6\1\254\35\6\1\0\4\6\26\0\1\272"+
    "\46\0\14\6\1\273\37\6\1\0\4\6\6\0\14\6"+
    "\1\0\1\274\36\6\1\0\4\6\6\0\14\6\1\0"+
    "\37\6\1\0\1\275\3\6\14\0\1\276\72\0\1\277"+
    "\125\0\1\300\23\0\1\301\60\0\5\6\1\231\6\6"+
    "\1\0\37\6\1\0\4\6\20\0\1\302\54\0\14\6"+
    "\1\0\30\6\1\231\6\6\1\0\4\6\6\0\10\6"+
    "\1\303\3\6\1\0\37\6\1\0\4\6\24\0\1\304"+
    "\60\0\1\305\112\0\1\306\43\0\1\276\77\0\1\307"+
    "\72\0\1\310\54\0\1\311\52\0\14\6\1\241\37\6"+
    "\1\0\4\6\24\0\1\312\104\0\1\313\64\0\1\314"+
    "\60\0\1\315\42\0\10\6\1\316\3\6\1\0\37\6"+
    "\1\0\4\6\6\0\14\6\1\317\37\6\1\0\4\6"+
    "\21\0\1\31\101\0\1\320\63\0\1\31\60\0\1\321"+
    "\65\0\1\322\52\0\5\6\1\323\6\6\1\0\37\6"+
    "\1\0\4\6\14\0\1\324\71\0\1\325\117\0\1\312"+
    "\32\0\1\326\65\0\1\327\115\0\1\330\40\0\1\331"+
    "\75\0\1\332\65\0\1\333\64\0\1\334\54\0\14\6"+
    "\1\0\17\6\1\335\17\6\1\0\4\6\13\0\1\336"+
    "\126\0\1\337\33\0\1\340\64\0\1\341\56\0\14\6"+
    "\1\0\3\6\1\35\33\6\1\0\4\6\22\0\1\342"+
    "\62\0\1\343\63\0\1\344\113\0\1\31\54\0\1\345"+
    "\62\0\1\346\66\0\1\347\63\0\1\350\62\0\1\351"+
    "\61\0\14\6\1\0\3\6\1\172\33\6\1\0\4\6"+
    "\26\0\1\352\113\0\1\353\27\0\1\354\75\0\1\355"+
    "\70\0\1\356\54\0\1\357\101\0\1\360\54\0\1\361"+
    "\75\0\1\362\60\0\1\363\75\0\1\364\115\0\1\357"+
    "\53\0\1\365\56\0\1\366\51\0\1\367\75\0\1\370"+
    "\72\0\1\371\55\0\1\372\73\0\1\373\60\0\1\374"+
    "\114\0\1\375\42\0\1\376\72\0\1\377\60\0\1\u0100"+
    "\75\0\1\31\103\0\1\u0101\51\0\1\u0102\57\0\1\31"+
    "\66\0\1\u0103\65\0\1\31\73\0\1\u0104\76\0\1\u0105"+
    "\55\0\1\u0106\71\0\1\u0107\62\0\1\u0108\64\0\1\u0109"+
    "\127\0\1\u010a\31\0\1\u010b\76\0\1\u010c\62\0\1\u010d"+
    "\60\0\1\u010e\110\0\1\u010f\46\0\1\u0110\62\0\1\u0111"+
    "\117\0\1\31\37\0\1\u0112\65\0\1\u0113\77\0\1\u0114"+
    "\66\0\1\u0115\60\0\1\357\76\0\1\u0116\60\0\1\u0117"+
    "\130\0\1\u0118\16\0\1\367\102\0\1\357\56\0\1\u0119"+
    "\71\0\1\u011a\57\0\1\u011b\74\0\1\u011c\57\0\1\u0116"+
    "\77\0\1\u011d\55\0\1\u011e\104\0\1\u011f\66\0\1\u0120"+
    "\51\0\1\u0121\100\0\1\357\40\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15455];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\25\1\1\11\11\1\1\0\37\1\1\0"+
    "\22\1\1\0\14\1\2\0\21\1\2\0\11\1\3\0"+
    "\1\1\2\0\4\1\1\0\4\1\2\0\1\1\1\0"+
    "\1\1\1\0\2\1\1\0\1\1\6\0\1\1\2\0"+
    "\1\1\1\0\3\1\4\0\1\1\1\0\2\1\7\0"+
    "\1\1\4\0\2\1\5\0\1\1\12\0\1\1\4\0"+
    "\1\1\11\0\1\1\21\0\1\11\34\0\1\11\25\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[289];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  StringBuilder string = new StringBuilder();
  
  private Token symbol(TokenType type) {
    return new Token(type, yyline+1, yycolumn+1, type.toString());
  }

  private Token symbol(TokenType type, String value) {
    return new Token(type, yyline+1, yycolumn+1, value);
  }
  
  private Token symbol(TokenType type, Object value) {
    return new Token(type, yyline+1, yycolumn+1, value.toString());
  }
  
  


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 254) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(YYINITIAL); return symbol(TokenType.SYMBOL, yytext().charAt(0));
            } 
            // fall through
          case 7: break;
          case 2: 
            { /* ignore */
            } 
            // fall through
          case 8: break;
          case 3: 
            { yybegin(YYINITIAL); return symbol(TokenType.NOTHIPSTER, string.toString());
            } 
            // fall through
          case 9: break;
          case 4: 
            { return symbol(TokenType.SUPERHIPSTER);
            } 
            // fall through
          case 10: break;
          case 5: 
            { return symbol(TokenType.SEMIHIPSTER);
            } 
            // fall through
          case 11: break;
          case 6: 
            { return symbol(TokenType.MILDLYHIPSTER);
            } 
            // fall through
          case 12: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
