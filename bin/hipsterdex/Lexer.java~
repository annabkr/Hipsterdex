/* The following code was generated by JFlex 1.7.0 */

package hipsterdex;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>/Users/annabaker/git/Hipsterdex/src/main/jflex/Lexer.flex</tt>
 */
public class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\3\2\0\1\2\22\0\1\24\1\0\1\6\4\0"+
    "\1\7\3\62\5\0\1\4\3\70\4\71\2\5\7\0\1\12\1\14"+
    "\1\31\2\0\1\13\1\37\1\46\1\27\1\35\1\43\1\45\1\50"+
    "\1\51\1\53\1\66\1\0\1\67\1\40\1\60\1\61\1\0\1\64"+
    "\1\0\1\63\2\0\1\10\4\0\1\15\1\34\1\21\1\42\1\16"+
    "\1\54\1\55\1\26\1\20\1\11\1\23\1\32\1\52\1\30\1\44"+
    "\1\33\1\41\1\22\1\17\1\25\1\36\1\57\1\56\1\65\1\47"+
    "\1\11\1\0\1\62\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff93\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\3\1\1\2\1\3\1\4\1\5\2\0\1\5"+
    "\4\0\1\5\7\0\2\5\3\0\1\6\1\7\41\0"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\11\1\22\53\0\1\11\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\75\0"+
    "\1\34\175\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[317];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\256\0\u015c"+
    "\0\u0196\0\u01d0\0\u020a\0\u0244\0\u0196\0\u027e\0\u02b8\0\u02f2"+
    "\0\u032c\0\u0366\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2"+
    "\0\u04fc\0\256\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e\0\256"+
    "\0\u0658\0\u0692\0\u06cc\0\u0706\0\u0740\0\u077a\0\u07b4\0\u07ee"+
    "\0\u0828\0\u0862\0\u089c\0\u08d6\0\u0910\0\u094a\0\u0984\0\u09be"+
    "\0\u09f8\0\u0a32\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54\0\u0b8e"+
    "\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0\0\u0cea\0\u0d24\0\u0d5e"+
    "\0\u0d98\0\256\0\u0dd2\0\256\0\256\0\256\0\256\0\256"+
    "\0\256\0\256\0\256\0\u0e0c\0\256\0\u0e46\0\u0e80\0\u0eba"+
    "\0\u0ef4\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc\0\u1016\0\u1050\0\u108a"+
    "\0\u10c4\0\u10fe\0\u1138\0\u1172\0\u11ac\0\u11e6\0\u1220\0\u125a"+
    "\0\u1294\0\u12ce\0\u1308\0\u1342\0\u137c\0\u13b6\0\u13f0\0\u142a"+
    "\0\u1464\0\u149e\0\u14d8\0\u1512\0\u154c\0\u1586\0\u15c0\0\u15fa"+
    "\0\u1634\0\u166e\0\u16a8\0\u16e2\0\u171c\0\u1756\0\u1790\0\u17ca"+
    "\0\256\0\256\0\256\0\256\0\256\0\256\0\256\0\256"+
    "\0\256\0\256\0\u1804\0\u183e\0\u1878\0\u18b2\0\u18ec\0\u1926"+
    "\0\u1960\0\u199a\0\u19d4\0\u1a0e\0\u1a48\0\u1a82\0\u1abc\0\u1af6"+
    "\0\u1b30\0\u1b6a\0\u1ba4\0\u1bde\0\u1c18\0\u1c52\0\u1c8c\0\u1cc6"+
    "\0\u1d00\0\u1d3a\0\u1d74\0\u1dae\0\u1de8\0\u1e22\0\u1e5c\0\u1e96"+
    "\0\u1ed0\0\u1f0a\0\u1f44\0\u1f7e\0\u1fb8\0\u1ff2\0\u202c\0\u2066"+
    "\0\u20a0\0\u20da\0\u2114\0\u214e\0\u2188\0\u21c2\0\u21fc\0\u2236"+
    "\0\u2270\0\u22aa\0\u22e4\0\u231e\0\u2358\0\u2392\0\u23cc\0\u2406"+
    "\0\u2440\0\u247a\0\u24b4\0\u24ee\0\u2528\0\u2562\0\u259c\0\256"+
    "\0\u25d6\0\u2610\0\u264a\0\u2684\0\u26be\0\u26f8\0\u2732\0\u276c"+
    "\0\u27a6\0\u27e0\0\u281a\0\u2854\0\u288e\0\u28c8\0\u2902\0\u293c"+
    "\0\u2976\0\u29b0\0\u29ea\0\u2a24\0\u2a5e\0\u2a98\0\u2ad2\0\u2b0c"+
    "\0\u2b46\0\u2b80\0\u2bba\0\u2bf4\0\u2c2e\0\u2c68\0\u2ca2\0\u2cdc"+
    "\0\u2d16\0\u2d50\0\u2d8a\0\u2dc4\0\u2dfe\0\u2e38\0\u2e72\0\u2eac"+
    "\0\u2ee6\0\u2f20\0\u2f5a\0\u2f94\0\u2fce\0\u3008\0\u3042\0\u307c"+
    "\0\u30b6\0\u30f0\0\u312a\0\u3164\0\u319e\0\u31d8\0\u3212\0\u324c"+
    "\0\u3286\0\u32c0\0\u32fa\0\u3334\0\u336e\0\u33a8\0\u33e2\0\u341c"+
    "\0\u3456\0\u3490\0\u34ca\0\u3504\0\u353e\0\u3578\0\u35b2\0\u35ec"+
    "\0\u3626\0\u3660\0\u369a\0\u36d4\0\u370e\0\u3748\0\u3782\0\u37bc"+
    "\0\u37f6\0\u3830\0\u386a\0\u38a4\0\u38de\0\u3918\0\u3952\0\u398c"+
    "\0\u39c6\0\u3a00\0\u3a3a\0\u3a74\0\u3aae\0\u3ae8\0\u3b22\0\u3b5c"+
    "\0\u3b96\0\u3bd0\0\u3c0a\0\u3c44\0\u3c7e\0\u3cb8\0\u3cf2\0\u3d2c"+
    "\0\u3d66\0\u3da0\0\u3dda\0\u3e14\0\u3e4e\0\u3e88\0\u3ec2\0\u3efc"+
    "\0\u3f36\0\u3f70\0\u3faa\0\u3fe4\0\u401e\0\u4058\0\u4092\0\u40cc"+
    "\0\u4106\0\u4140\0\u417a\0\u41b4\0\u41ee";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[317];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\4\1\5\2\4\1\6\1\7\1\10\1\0"+
    "\1\11\1\12\1\13\1\14\1\15\1\11\1\15\4\11"+
    "\1\4\2\11\1\16\1\11\1\17\3\11\1\20\1\11"+
    "\1\21\1\22\2\11\1\23\1\11\1\24\1\25\1\15"+
    "\1\26\1\27\1\11\1\30\4\11\1\31\1\0\1\32"+
    "\1\33\1\34\1\11\1\35\1\36\2\6\2\37\2\0"+
    "\2\37\1\40\1\37\1\41\61\37\2\42\2\0\3\42"+
    "\1\0\1\43\61\42\75\0\1\4\72\0\2\6\62\0"+
    "\2\6\50\0\1\44\32\0\1\11\3\0\7\11\1\0"+
    "\2\11\1\0\1\11\1\0\3\11\1\0\1\11\2\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\11\1\0"+
    "\4\11\5\0\1\11\17\0\1\32\26\0\1\45\51\0"+
    "\1\46\64\0\1\47\4\0\1\50\24\0\1\51\46\0"+
    "\1\52\77\0\1\53\75\0\1\54\53\0\1\55\23\0"+
    "\1\56\42\0\1\57\2\0\1\60\12\0\1\61\5\0"+
    "\1\62\2\0\1\63\11\0\1\64\31\0\1\65\25\0"+
    "\1\66\45\0\1\67\107\0\1\70\51\0\1\71\70\0"+
    "\1\72\1\73\103\0\1\74\67\0\1\75\7\0\1\76"+
    "\77\0\1\77\71\0\1\100\45\0\1\101\131\0\1\102"+
    "\11\0\2\37\2\0\2\37\1\0\1\37\1\0\61\37"+
    "\4\0\1\103\1\0\1\104\1\105\1\106\11\0\1\107"+
    "\2\0\1\110\2\0\1\111\3\0\1\112\17\0\1\113"+
    "\13\0\1\103\1\114\7\0\1\115\66\0\1\116\1\0"+
    "\1\117\1\120\1\121\11\0\1\122\2\0\1\123\2\0"+
    "\1\124\3\0\1\125\17\0\1\126\13\0\1\116\1\127"+
    "\16\0\1\130\111\0\1\131\71\0\1\132\51\0\1\32"+
    "\1\133\70\0\1\134\17\0\1\135\51\0\1\136\130\0"+
    "\1\137\31\0\1\140\74\0\1\141\73\0\1\142\64\0"+
    "\1\143\74\0\1\144\11\0\1\145\72\0\1\146\56\0"+
    "\1\147\107\0\1\150\55\0\1\151\65\0\1\152\100\0"+
    "\1\153\116\0\1\154\44\0\1\32\74\0\1\145\1\0"+
    "\1\155\17\0\1\156\61\0\1\157\101\0\1\160\44\0"+
    "\1\161\70\0\1\162\63\0\1\163\1\0\1\164\73\0"+
    "\1\165\124\0\1\166\37\0\1\167\67\0\1\170\54\0"+
    "\1\114\63\0\2\114\4\0\1\171\63\0\2\171\4\0"+
    "\1\127\2\0\1\172\60\0\2\127\7\0\1\173\71\0"+
    "\1\174\71\0\1\175\71\0\1\176\71\0\1\177\71\0"+
    "\1\200\71\0\1\201\71\0\1\202\66\0\1\203\2\0"+
    "\1\172\60\0\2\203\22\0\1\204\101\0\1\205\57\0"+
    "\1\206\71\0\1\207\66\0\1\210\104\0\1\211\65\0"+
    "\1\212\111\0\1\213\60\0\1\214\57\0\1\215\102\0"+
    "\1\216\71\0\1\217\101\0\1\220\54\0\1\221\77\0"+
    "\1\222\70\0\1\223\54\0\1\224\76\0\1\225\71\0"+
    "\1\226\113\0\1\32\61\0\1\227\73\0\1\230\67\0"+
    "\1\231\55\0\1\232\66\0\1\233\130\0\1\234\71\0"+
    "\1\235\41\0\1\236\67\0\1\237\77\0\1\240\56\0"+
    "\1\241\2\0\1\32\67\0\1\32\72\0\1\242\61\0"+
    "\1\172\102\0\1\243\76\0\1\244\71\0\1\245\65\0"+
    "\1\32\73\0\1\246\67\0\1\247\63\0\1\250\103\0"+
    "\1\251\70\0\1\252\63\0\1\253\77\0\1\254\64\0"+
    "\1\102\76\0\1\255\114\0\1\32\42\0\1\256\103\0"+
    "\1\257\101\0\1\32\76\0\1\260\101\0\1\167\50\0"+
    "\1\261\57\0\1\262\77\0\1\263\64\0\1\264\63\0"+
    "\1\265\104\0\1\266\71\0\1\267\56\0\1\270\71\0"+
    "\1\145\77\0\1\271\70\0\1\272\71\0\1\273\66\0"+
    "\1\274\70\0\1\275\66\0\1\276\100\0\1\277\73\0"+
    "\1\300\61\0\1\301\77\0\1\302\101\0\1\303\61\0"+
    "\1\304\105\0\1\305\61\0\1\306\71\0\1\307\61\0"+
    "\1\256\3\0\1\310\71\0\1\311\66\0\1\312\65\0"+
    "\1\313\72\0\1\314\70\0\1\315\101\0\1\167\64\0"+
    "\1\316\67\0\1\317\100\0\1\320\70\0\1\321\67\0"+
    "\1\322\113\0\1\323\42\0\1\300\104\0\1\324\63\0"+
    "\1\325\74\0\1\326\76\0\1\327\56\0\1\330\67\0"+
    "\1\331\75\0\1\332\111\0\1\62\74\0\1\333\102\0"+
    "\1\334\41\0\1\335\74\0\1\336\67\0\1\274\73\0"+
    "\1\337\65\0\1\340\72\0\1\341\131\0\1\342\22\0"+
    "\1\343\75\0\1\344\130\0\1\345\26\0\1\346\75\0"+
    "\1\347\124\0\1\300\34\0\1\350\77\0\1\351\63\0"+
    "\1\352\115\0\1\353\46\0\1\343\102\0\1\354\63\0"+
    "\1\355\71\0\1\310\73\0\1\356\107\0\1\357\67\0"+
    "\1\360\63\0\1\361\55\0\1\362\75\0\1\363\70\0"+
    "\1\32\104\0\1\364\66\0\1\32\63\0\1\365\70\0"+
    "\1\366\62\0\1\367\72\0\1\370\74\0\1\371\122\0"+
    "\1\356\35\0\1\372\117\0\1\373\43\0\1\374\100\0"+
    "\1\375\70\0\1\376\67\0\1\377\113\0\1\u0100\42\0"+
    "\1\u0101\131\0\1\u0102\36\0\1\u0103\67\0\1\u0104\101\0"+
    "\1\32\65\0\1\u0105\65\0\1\274\66\0\1\u0106\104\0"+
    "\1\u0107\65\0\1\u0108\71\0\1\u0109\66\0\1\u010a\65\0"+
    "\1\324\104\0\1\241\71\0\1\u010b\116\0\1\u010c\32\0"+
    "\1\u010d\100\0\1\u010e\73\0\1\u010f\72\0\1\u0110\57\0"+
    "\1\u0111\100\0\1\u0112\63\0\1\u0113\100\0\1\u0114\105\0"+
    "\1\u0115\61\0\1\u0116\54\0\1\67\100\0\1\u0117\75\0"+
    "\1\u0118\60\0\1\167\76\0\1\u0119\63\0\1\u011a\117\0"+
    "\1\u011b\45\0\1\u011c\75\0\1\u011d\63\0\1\u011e\115\0"+
    "\1\u011f\54\0\1\u0120\62\0\1\u0121\70\0\1\32\76\0"+
    "\1\u0122\101\0\1\u0123\60\0\1\u0124\74\0\1\u0125\65\0"+
    "\1\u0126\67\0\1\u0127\132\0\1\u0128\34\0\1\221\101\0"+
    "\1\102\65\0\1\u0129\63\0\1\u012a\113\0\1\u012b\51\0"+
    "\1\u012c\65\0\1\u012d\73\0\1\u012e\70\0\1\u012f\102\0"+
    "\1\u0130\71\0\1\u0131\63\0\1\300\101\0\1\u0132\63\0"+
    "\1\u0133\54\0\1\u0134\100\0\1\67\105\0\1\300\61\0"+
    "\1\u0135\74\0\1\u0136\62\0\1\u0137\77\0\1\u0138\62\0"+
    "\1\u0132\102\0\1\u0139\60\0\1\u013a\107\0\1\u013b\71\0"+
    "\1\u013c\54\0\1\u013d\103\0\1\300\41\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16936];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\2\1\1\11\3\1\2\0\1\1\4\0"+
    "\1\1\7\0\1\11\1\1\3\0\1\1\1\11\41\0"+
    "\1\11\1\1\10\11\1\1\1\11\53\0\12\11\75\0"+
    "\1\11\175\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[317];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  StringBuilder string = new StringBuilder();
  
  private Token symbol(TokenType type) {
    return new Token(type, yyline+1, yycolumn+1, type.toString());
  }

  private Token symbol(TokenType type, String value) {
    return new Token(type, yyline+1, yycolumn+1, value);
  }
  


  


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 180) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /* ignore */
            } 
            // fall through
          case 29: break;
          case 2: 
            { yybegin(STRING); string.setLength(0);
            } 
            // fall through
          case 30: break;
          case 3: 
            { yybegin(CHARLITERAL);
            } 
            // fall through
          case 31: break;
          case 4: 
            { return symbol(TokenType.NOTHIPSTER);
            } 
            // fall through
          case 32: break;
          case 5: 
            { return symbol(TokenType.SUPERHIPSTER);
            } 
            // fall through
          case 33: break;
          case 6: 
            { string.append( yytext() );
            } 
            // fall through
          case 34: break;
          case 7: 
            { yybegin(YYINITIAL); return symbol(TokenType.NOTHIPSTER, string.toString());
            } 
            // fall through
          case 35: break;
          case 8: 
            { return symbol(TokenType.SEMIHIPSTER);
            } 
            // fall through
          case 36: break;
          case 9: 
            { char val = (char) Integer.parseInt(yytext().substring(1),8);
                        				   string.append( val );
            } 
            // fall through
          case 37: break;
          case 10: 
            { string.append( '\"' );
            } 
            // fall through
          case 38: break;
          case 11: 
            { string.append( '\'' );
            } 
            // fall through
          case 39: break;
          case 12: 
            { string.append( '\\' );
            } 
            // fall through
          case 40: break;
          case 13: 
            { string.append( '\r' );
            } 
            // fall through
          case 41: break;
          case 14: 
            { string.append( '\t' );
            } 
            // fall through
          case 42: break;
          case 15: 
            { string.append( '\n' );
            } 
            // fall through
          case 43: break;
          case 16: 
            { string.append( '\b' );
            } 
            // fall through
          case 44: break;
          case 17: 
            { string.append( '\f' );
            } 
            // fall through
          case 45: break;
          case 18: 
            { yybegin(YYINITIAL); return symbol(TokenType.NOTHIPSTER, yytext().charAt(0));
            } 
            // fall through
          case 46: break;
          case 19: 
            { yybegin(YYINITIAL); 
			                              int val = Integer.parseInt(yytext().substring(1,yylength()-1),8);
			                            return symbol(TokenType.NOTHIPSTER, (char)val);
            } 
            // fall through
          case 47: break;
          case 20: 
            { yybegin(YYINITIAL); return symbol(TokenType.NOTHIPSTER, '\"');
            } 
            // fall through
          case 48: break;
          case 21: 
            { yybegin(YYINITIAL); return symbol(TokenType.NOTHIPSTER, '\'');
            } 
            // fall through
          case 49: break;
          case 22: 
            { yybegin(YYINITIAL); return symbol(TokenType.NOTHIPSTER, '\\');
            } 
            // fall through
          case 50: break;
          case 23: 
            { yybegin(YYINITIAL); return symbol(TokenType.NOTHIPSTER, '\r');
            } 
            // fall through
          case 51: break;
          case 24: 
            { yybegin(YYINITIAL); return symbol(TokenType.NOTHIPSTER, '\t');
            } 
            // fall through
          case 52: break;
          case 25: 
            { yybegin(YYINITIAL); return symbol(TokenType.NOTHIPSTER, '\n');
            } 
            // fall through
          case 53: break;
          case 26: 
            { yybegin(YYINITIAL); return symbol(TokenType.NOTHIPSTER, '\b');
            } 
            // fall through
          case 54: break;
          case 27: 
            { yybegin(YYINITIAL); return symbol(TokenType.NOTHIPSTER, '\f');
            } 
            // fall through
          case 55: break;
          case 28: 
            { return symbol(TokenType.MILDLYHIPSTER);
            } 
            // fall through
          case 56: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
